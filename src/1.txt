//  φ = A / ψ = B / θ = C
    double x, y, z, A, B, C;
    double VER = 0;
    double temp_sin = 0;
    double temp_cos = 0;
    Matrix<double, 4, 4> Tr;
    Matrix<double, 4, 4> Ra;
    Matrix<double, 4, 4> Ro;

    //extract n , o , a , p 
    Matrix<double, 3, 1> st_n;
    Matrix<double, 3, 1> nd_n;
    Matrix<double, 3, 1> st_o;
    Matrix<double, 3, 1> nd_o;
    Matrix<double, 3, 1> st_a;
    Matrix<double, 3, 1> nd_a;
    Matrix<double, 3, 1> st_p;
    Matrix<double, 3, 1> nd_p;

    //assignment
    st_n << st(0, 0), st(1, 0), st(2, 0);
    nd_n << nd(0, 0), nd(1, 0), nd(2, 0);
    st_o << st(0, 1), st(1, 1), st(2, 1);
    nd_o << nd(0, 1), nd(1, 1), nd(2, 1);
    st_a << st(0, 2), st(1, 2), st(2, 2);
    nd_a << nd(0, 2), nd(1, 2), nd(2, 2);
    st_p << st(0, 3), st(1, 3), st(2, 3);
    nd_p << nd(0, 3), nd(1, 3), nd(2, 3);

    //calculate x, y, z, A, B, C
    VER = 1 - cos(r* C);

    x = column_mul(st_n, nd_p - st_p);   //x = 1n*(2p-1p)
    y = column_mul(st_o, nd_p - st_p);   //y = 1o*(2p-1p)
    z = column_mul(st_a, nd_p - st_p) ;  //z = 1a*(2p-1p)
    B = atan2(column_mul(st_o, nd_a),column_mul(st_n, nd_a));   // ψ
    C = atan2(sqrt(pow(column_mul(st_n, nd_a), 2) + pow(column_mul(st_o, nd_a), 2)),column_mul(st_a, nd_a)); // θ

    temp_sin = -1*sin(B)*cos(B)*VER*(column_mul(st_n, nd_n)) + (pow(cos(B), 2)*VER + cos(C))*column_mul(st_o, nd_n) - sin(B)*sin(C)*column_mul(st_a, nd_n);
    temp_cos = -1*sin(B)*cos(B)*VER*(column_mul(st_n, nd_o)) + (pow(cos(B), 2)*VER + cos(C))*column_mul(st_o, nd_o) - sin(B)*sin(C)*column_mul(st_a, nd_o);

    A = atan2(temp_sin, temp_cos); // φ
    
    Tr << 1, 0, 0, r*x,
            0, 1, 0, r*y,
            0, 0, 1, r*z,
            0, 0, 0, 1;
    
    Ra << pow(sin(B), 2)*VER + cos(r*C), -1*sin(B)*cos(B)*VER, cos(B)*sin(r*C), 0,
            -1*sin(B)*cos(B)*(1 - cos(r*C)), pow(cos(B), 2)*VER + cos(r*C), sin(B)*sin(r*C), 0,
            -1*cos(B)*sin(r*C), -1*sin(B)*sin(r*C), cos(r*C), 0,
            0, 0, 0, 1;

    Ro << cos(r*A), -1*sin(r*A), 0, 0,
            sin(r*A), cos(r*A), 0, 0,
            0, 0, 1, 0,
            0, 0, 0, 1;

    T6 = Tr*Ra*Ro;




    if(t < 0.3 ){

        float h = t / T;

        p_x = POS_A(0, 3) + (POS_B(0, 3) - POS_A(0, 3))*h;
        p_y = POS_A(1, 3) + (POS_B(1, 3) - POS_A(1, 3))*h;
        p_z = POS_A(2, 3) + (POS_B(2, 3) - POS_A(2, 3))*h;

        //v_x = (POS_B(0, 3) - POS_A(0, 3)) / T;
        //v_y = (POS_B(1, 3) - POS_A(1, 3)) / T;
        //v_z = (POS_B(2, 3) - POS_A(2, 3)) / T;

        //a_x = 0;
        //a_y = 0;
        //a_z = 0;

        //cout<< t << endl;


    }else if(t >= 0.3 && t <= 0.7){

        t = t - 0.5;

        float h = (t + t_acc) / (2*t_acc);
        
        p_x = (((POS_C(0, 3) - POS_B(0, 3))*t_acc / trans_T + (boundary_p_x - POS_B(0, 3)))*(2 - h)*pow(h, 2) - 2*(boundary_p_x - POS_B(0, 3)))*h + POS_B(0, 3) + (boundary_p_x - POS_B(0, 3));
        p_y = (((POS_C(1, 3) - POS_B(1, 3))*t_acc / trans_T + (boundary_p_y - POS_B(1, 3)))*(2 - h)*pow(h, 2) - 2*(boundary_p_y - POS_B(1, 3)))*h + POS_B(1, 3) + (boundary_p_y - POS_B(1, 3));
        p_z = (((POS_C(2, 3) - POS_B(2, 3))*t_acc / trans_T + (boundary_p_z - POS_B(2, 3)))*(2 - h)*pow(h, 2) - 2*(boundary_p_z - POS_B(2, 3)))*h + POS_B(2, 3) + (boundary_p_z - POS_B(2, 3));

        //v_x = ((((POS_C(0, 3) - POS_B(0, 3))*t_acc / T) + (POS_A(0, 3) - POS_B(0, 3)))*(1.5 - h)*2*pow(h, 2) - (POS_A(0, 3) - POS_B(0, 3))) / t_acc;
        //v_y = ((((POS_C(1, 3) - POS_B(1, 3))*t_acc / T) + (POS_A(1, 3) - POS_B(1, 3)))*(1.5 - h)*2*pow(h, 2) - (POS_A(1, 3) - POS_B(1, 3))) / t_acc;
        //v_z = ((((POS_C(2, 3) - POS_B(2, 3))*t_acc / T) + (POS_A(2, 3) - POS_B(2, 3)))*(1.5 - h)*2*pow(h, 2) - (POS_A(2, 3) - POS_B(2, 3))) / t_acc;

        //a_x = (((POS_C(0, 3) - POS_B(0, 3))*t_acc / T) + (POS_A(0, 3) - POS_B(0, 3))*(1 - h))*3*h / pow(t_acc, 2);
        //a_y = (((POS_C(1, 3) - POS_B(1, 3))*t_acc / T) + (POS_A(1, 3) - POS_B(1, 3))*(1 - h))*3*h / pow(t_acc, 2);
        //a_z = (((POS_C(2, 3) - POS_B(2, 3))*t_acc / T) + (POS_A(2, 3) - POS_B(2, 3))*(1 - h))*3*h / pow(t_acc, 2);

        //cout<< t << endl;

        t = t + 0.5;


    }else{
        float h = t / T;

        p_x = POS_B(0, 3) + (POS_C(0, 3) - POS_B(0, 3))*h;
        p_y = POS_B(1, 3) + (POS_C(1, 3) - POS_B(1, 3))*h;
        p_z = POS_B(2, 3) + (POS_C(2, 3) - POS_B(2, 3))*h;

        //v_x = (POS_C(0, 3) - POS_B(0, 3)) / T;
        //v_y = (POS_C(1, 3) - POS_B(1, 3)) / T;
        //v_z = (POS_C(2, 3) - POS_B(2, 3)) / T;

        //a_x = 0;
        //a_y = 0;
        //a_z = 0;

        //cout<< t << endl;

    }